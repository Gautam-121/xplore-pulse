# User GraphQL Schema

type User {
  id: ID!
  phoneNumber: String!
  countryCode: String!
  name: String
  email: String
  bio: String
  profileImageUrl: String
  interests: [Interest!]!
  isPhoneVerified: Boolean!
  isEmailVerified: Boolean!
  isActive: Boolean!
  isProfileComplete: Boolean!
  onboardingStep: OnboardingStep!
  notificationSettings: NotificationSettings!
  createdAt: DateTime!
  updatedAt: DateTime!
  lastActiveAt: DateTime!
  authTokens: AuthTokens
}

type Location {
    latitude: Float!
    longitude: Float!
    address: String
    city: String
    state: String
    country: String
    zipCode: String
  }

enum OnboardingStep {
  PHONE_VERIFICATION
  PROFILE_SETUP
  INTERESTS_SELECTION
  COMMUNITY_RECOMMENDATIONS
  COMPLETED
}

type NotificationSettings {
  pushNotifications: Boolean!
  emailNotifications: Boolean!
  communityUpdates: Boolean!
  eventReminders: Boolean!
}

# User Input Types
input ProfileSetupInput {
  name: String!
  bio: String
  profileImage: Upload
  email: String
}

input UpdateProfileInput {
  name: String
  bio: String
  profileImage: Upload
  removeProfileImage: Boolean
}

input NotificationSettingsInput {
  pushNotifications: Boolean
  emailNotifications: Boolean
  communityUpdates: Boolean
  eventReminders: Boolean
  fcmToken:String
}


# User Response Types
type DeleteAccountResponse {
  success: Boolean!
  message: String!
  scheduledDeletionDate: DateTime!
}

type ProfileSetupResponse {
  success: Boolean!
  user: User!
  message: String!
}

type SelectInterestsResponse {
  success: Boolean!
  user: User!
  message: String!
}

type UpdateOnboardingResponse {
  success: Boolean!
  user: User!
  message: String!
}

type UpdateProfileResponse {
  success: Boolean!
  user: User!
  message: String!
}

type UpdateNotificationSettingsResponse {
  success: Boolean!
  notificationSettings: NotificationSettings!
  message: String!
}

type EmailOTPResponse {
  success: Boolean!
  message: String!
  user: User
}

type PublicUserProfile {
  id: ID!
  name: String
  bio: String
  profileImageUrl: String
  isPhoneVerified: Boolean!
  isEmailVerified: Boolean!
  interests: [Interest!]!
  createdAt: DateTime!
}

type SearchUsersResponse {
  users: [PublicUserProfile!]!
  totalCount: Int!
  hasMore: Boolean!
}

type OTPRequestResponse {
  success: Boolean!
  message: String!
  retryAfter: Int
}

# User Mutations
extend type Mutation {
  # Profile Setup
  completeProfileSetup(input: ProfileSetupInput!): ProfileSetupResponse!
  selectInterests(interestIds: [ID!]!): SelectInterestsResponse!
  updateOnboardingStep(step: OnboardingStep!): UpdateOnboardingResponse!
  # Profile Management
  updateUserProfile(input: UpdateProfileInput!): UpdateProfileResponse!
  updateNotificationSettings(input: NotificationSettingsInput!): UpdateNotificationSettingsResponse!
  # Email Verification
  resendEmailOTP(email: String!): EmailOTPResponse!
  verifyEmailOTP(email: String!, otp: String!): EmailOTPResponse!

  # Email update flow
  requestEmailUpdate(email: String!): OTPRequestResponse!
  verifyAndUpdateEmail(email: String!, otp: String!): ProfileSetupResponse!

  # Phone update flow
  requestPhoneUpdate(phoneNumber: String!, countryCode: String!): OTPRequestResponse!
  verifyAndUpdatePhone(phoneNumber: String!, countryCode: String!, otp: String!): ProfileSetupResponse!
  
  # Account Management
  deleteAccount(reason: String): DeleteAccountResponse!
}

# User Queries
extend type Query {
  # User queries
  currentUser: User
} 