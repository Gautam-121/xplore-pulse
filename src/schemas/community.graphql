type Community {
  id: ID!
  name: String!
  slug: String!
  description: String!
  shortDescription: String
  coverImageUrl: String
  logoUrl: String

  type: CommunityType!
  isPaid: Boolean!
  membershipFee: Float!
  currency: String!
  billingCycle: BillingCycle!

  privacy: CommunityPrivacy!
  joinApproval: JoinApprovalType!

  membersCount: Int!
  createdBy: ID!

  isActive: Boolean!
  isArchived: Boolean!

  createdAt: String
  updatedAt: String
  lastActivityAt: String
}

enum CommunityType {
  FREE
  PAID
}

enum BillingCycle {
  ONE_TIME
  MONTHLY
  YEARLY
}

enum CommunityPrivacy {
  PUBLIC
  PRIVATE
  SECRET
}

enum JoinApprovalType {
  AUTOMATIC
  MANUAL
  INVITE_ONLY
}

input CommunityFilterInput {
  sortBy: String = "membersCount"
  sortOrder: String = "DESC"
  offset: Int = 0
  limit: Int = 10
}

type CommunityJoinResponse {
  success: Boolean!
  message: String!
  requiresPayment: Boolean
  paymentSessionId: ID
  paymentStatus: String
  status: String
}

type CommunityListResponse {
  success: Boolean!
  communities: [Community!]!
  totalCount: Int!
  hasMore: Boolean!
}

type MutationResponse {
  success: Boolean!
  message: String!
}


type Query {
  recommendedCommunities(filter: CommunityFilterInput): CommunityListResponse!
}

type Mutation {
  joinCommunity(communityId: ID!): CommunityJoinResponse!
  completeCommunityPayment(sessionId: ID!): MutationResponse!
}


