# Community Type and Related Enums

# Represents a community group
# Includes metadata, permissions, and relationship with users
 type Community {
    id: UUID!
    name: String!
    slug: String!                   # Unique, SEO-friendly identifier
    description: String!
    imageUrl: String               # Community profile image
    coverImageUrl: String          # Community cover/banner image
    isPrivate: Boolean!            # True = only approved members can join
    isPaid: Boolean!               # True = user must pay to join
    price: String                   # Required if isPaid is true
    currency: Currency               # Currency for paid communities (e.g., USD)
    memberCount: Int!              # Total number of members
    postCount: Int!                # Number of posts in the community
    eventCount: Int!               # Number of events hosted
    # location: Location             # Optional physical location of the community
    interests: [Interest!]!        # Tags or interest categories
    owner: User!                   # Creator of the community
    admins: [User!]!               # Additional admins
    moderators: [User!]!           # Moderators who manage discussions
    membershipStatus: MembershipStatus  # Current user's membership status
    isOwner: Boolean!              # Is the current user the owner
    isAdmin: Boolean!              # Is the current user an admin
    isModerator: Boolean!          # Is the current user a moderator
    canPost: Boolean!              # Whether the user can post
    createdAt: Date!
    updatedAt: Date!
 }

# Enum representing user's membership state in a community
enum MembershipStatus {
  NOT_MEMBER
  PENDING
  MEMBER
  REJECTED
  BANNED
}

enum Currency {
    INR
    USD
}

# Role a member can have in a community
enum MemberRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

# Status of membership request
enum MemberRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

# Geolocation structure
type Location {
  latitude: Float!
  longitude: Float!
}

# Membership record linking user to a community
type CommunityMember {
  id: UUID!
  user: User!
  role: MemberRole!
  status: MemberRequestStatus!
  joinedAt: Date                  # When the member was approved
  requestedAt: Date!             # When the join request was made
}

# Post in a community
# Updated for scalable, production-grade features

type CommunityPost {
  id: UUID!
  type: PostType!
  title: String
  content: String
  media: [Media!]!
  linkUrl: String
  linkTitle: String
  linkDescription: String
  linkImageUrl: String
  quizzes: [Quiz!]
  pollOptions: [PollOption]
  pollCount: Int
  tags: [String]
  mentions: [User!]
  visibility: PostVisibility
  isSponsored: Boolean
  reactions: [Reaction!]
  isBookmarked: Boolean!
  author: User!
  community: Community!
  createdAt: Date!
  updatedAt: Date!
}

# Supported post types
enum PostType {
  TEXT
  IMAGE
  VIDEO
  LINK
  POLL
  EDUCATIONAL
  QUIZ
  MIXED
}

# Quiz support
input QuizOptionInput {
  id: UUID
  text: String!
}

input QuizInput {
  id: UUID
  question: String!
  options: [QuizOptionInput!]!
  correctOptionId: UUID
}

type QuizOption {
  id: UUID!
  text: String!
}

type Quiz {
  id: UUID!
  question: String!
  options: [QuizOption!]!
  correctOptionId: UUID
}

# Mentions
# Already covered by [User!] in mentions field

# Visibility
enum PostVisibility {
  PUBLIC
  MEMBERS_ONLY
  ADMINS_ONLY
  PRIVATE
}

# Sponsorship
# isSponsored: Boolean

# Reactions
enum ReactionType {
  LIKE
  LOVE
  LAUGH
  WOW
  SAD
  ANGRY
}

type Reaction {
  type: ReactionType!
  count: Int!
}

# Poll option for polls

type PollOption {
  id: UUID!
  text: String!
  voteCount: Int!
}

# Media type for mixed media posts (carousel/album)
enum MediaType {
  IMAGE
  VIDEO
}

input MediaInput {
  type: MediaType!
  url: String!
  thumbnailUrl: String
  duration: Int
  altText: String
}

type Media {
  type: MediaType!
  url: String!
  thumbnailUrl: String
  duration: Int
  altText: String
}

# Pagination type for all connections
type PaginationInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalCount: Int!
  cursor: String
}

# Paginated community list
type CommunitiesConnection {
  edges: [CommunityEdge!]!
  pageInfo: PaginationInfo!
}

type CommunityEdge {
  node: Community!
  cursor: String!
}

# Paginated member list
type CommunityMembersConnection {
  edges: [CommunityMemberEdge!]!
  pageInfo: PaginationInfo!
}

type CommunityMemberEdge {
  node: CommunityMember!
  cursor: String!
}

# Paginated wall posts list
type CommunityWallConnection {
  edges: [CommunityPostEdge!]!
  pageInfo: PaginationInfo!
}

type CommunityPostEdge {
  node: CommunityPost!
  cursor: String!
}

# Filters for discovering communities
input CommunityFilters {
  interests: [UUID!]
  isPaid: Boolean
  isPrivate: Boolean
  memberCountMin: Int
  memberCountMax: Int
  sortBy: CommunitySortBy
  sortOrder: SortOrder
}

input LocationInput {
  latitude: Float!
  longitude: Float!
}

enum CommunitySortBy {
  CREATED_AT
  MEMBER_COUNT
  ACTIVITY
  RELEVANCE
  TRENDING
}

enum SortOrder {
  ASC
  DESC
}

# Input for creating a community
input CreateCommunityInput {
  name: String!
  description: String!
  imageUrl: String   # URL of uploaded image (use uploadFile mutation first)
  coverImageUrl: String # URL of uploaded cover image (use uploadFile mutation first)
  isPrivate: Boolean! = false
  isPaid: Boolean! = false
  price: Float
  currency: Currency = "USD"
  # location: LocationInput!
  interests: [UUID!]!
}

# Input for updating a community
input UpdateCommunityInput {
  name: String
  description: String
  imageUrl: String   # URL of uploaded image (use uploadFile mutation first)
  coverImageUrl: String # URL of uploaded cover image (use uploadFile mutation first)
  isPrivate: Boolean
  isPaid: Boolean
  price: Float
  currency: Currency
  # location: LocationInput
  interests: [UUID!]
}

# Input for creating posts
input CreateCommunityPostInput {
  communityId: UUID!
  type: PostType!
  title: String
  content: String
  media: [MediaInput!]!
  linkUrl: String
  linkTitle: String
  linkDescription: String
  linkImageUrl: String
  quizzes: [QuizInput!]
  pollOptions: [PollOptionInput]
  tags: [String]
  mentions: [UUID]
  visibility: PostVisibility
  isSponsored: Boolean
}


# Query operations
type Query {
  discoverCommunities(first: Int = 20, after: String, filters: CommunityFilters): CommunitiesConnection!
  searchCommunities(query: String!, first: Int = 20, after: String, filters: CommunityFilters): CommunitiesConnection!
  myJoinedCommunities(first: Int = 20, after: String, status: MemberRequestStatus): CommunitiesConnection! 
  myOwnedCommunities(first: Int = 20, after: String): CommunitiesConnection!
  community(id: UUID!): Community
  communityMembers(communityId: UUID!, first: Int = 20, after: String, role: MemberRole, status: MemberRequestStatus): CommunityMembersConnection!
  pendingMemberRequests(communityId: UUID!, first: Int = 20, after: String): CommunityMembersConnection!
  # Returns a paginated list of communities recommended for the current user based on their onboarding interests, activity, popularity, and other factors.
  # Only supports isPaid and trending filters for a pure, personalized feed.
  recommendedCommunities(first: Int = 20, after: String, isPaid: Boolean, trending: Boolean): CommunitiesConnection!
}

# Mutation operations
type Mutation {
  createCommunity(input: CreateCommunityInput!): Community!
  updateCommunity(id: UUID!, input: UpdateCommunityInput!): Community!
  deleteCommunity(id: UUID!): GenericResponse!

  joinCommunity(communityId: UUID!): GenericResponse!
  leaveCommunity(communityId: UUID!): GenericResponse!

  approveMemberRequest(communityId: UUID!, memberId: UUID!): GenericResponse!
  rejectMemberRequest(communityId: UUID!, memberId: UUID!): GenericResponse!

  assignMemberRole(communityId: UUID!, memberId: UUID!, role: MemberRole!): GenericResponse!
  removeMemberRole(communityId: UUID!, memberId: UUID!): GenericResponse!

  banMember(communityId: UUID!, memberId: UUID!, reason: String): GenericResponse!
  unbanMember(communityId: UUID!, memberId: UUID!): GenericResponse!
  
}
