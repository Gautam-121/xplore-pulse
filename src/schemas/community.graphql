# Community Type and Related Enums

# Represents a community group
# Includes metadata, permissions, and relationship with users
 type Community {
    id: UUID!
    name: String!
    slug: String!                   # Unique, SEO-friendly identifier
    description: String!
    imageUrl: String               # Community profile image
    coverImageUrl: String          # Community cover/banner image
    isPrivate: Boolean!            # True = only approved members can join
    isPaid: Boolean!               # True = user must pay to join
    price: Float                   # Required if isPaid is true
    currency: Currency               # Currency for paid communities (e.g., USD)
    memberCount: Int!              # Total number of members
    postCount: Int!                # Number of posts in the community
    eventCount: Int!               # Number of events hosted
    # location: Location             # Optional physical location of the community
    interests: [Interest!]!        # Tags or interest categories
    owner: User!                   # Creator of the community
    admins: [User!]!               # Additional admins
    moderators: [User!]!           # Moderators who manage discussions
    membershipStatus: MembershipStatus  # Current user's membership status
    isOwner: Boolean!              # Is the current user the owner
    isAdmin: Boolean!              # Is the current user an admin
    isModerator: Boolean!          # Is the current user a moderator
    canPost: Boolean!              # Whether the user can post
    createdAt: Date!
    updatedAt: Date!
 }

# Enum representing user's membership state in a community
enum MembershipStatus {
  NOT_MEMBER
  PENDING
  MEMBER
  REJECTED
  BANNED
}

enum Currency {
    INR
    USD
}

# Role a member can have in a community
enum MemberRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}

# Status of membership request
enum MemberRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

# Geolocation structure
type Location {
  latitude: Float!
  longitude: Float!
}

# Membership record linking user to a community
type CommunityMember {
  id: UUID!
  user: User!
  role: MemberRole!
  status: MemberRequestStatus!
  joinedAt: Date                  # When the member was approved
  requestedAt: Date!             # When the join request was made
}

# Post in a community
type CommunityPost {
  id: UUID!
  type: PostType!               # Content type (text, image, video, etc.)
  title: String!
  content: String
  imageUrls: [String]           # For image posts
  videoUrl: String              # For video posts
  linkUrl: String               # For link previews
  linkTitle: String
  linkDescription: String
  linkImageUrl: String
  isPaid: Boolean!
  price: Float
  currency: Currency
  author: User!
  community: Community!
  likesCount: Int!
  commentsCount: Int!
  sharesCount: Int!
  isLiked: Boolean!             # Is this post liked by current user
  isBookmarked: Boolean!        # Is this post bookmarked by current user
  tags: [String]                # Hashtags or keywords
  createdAt: Date!
  updatedAt: Date!
}

# Type of post supported
enum PostType {
  TEXT
  IMAGE
  VIDEO
  LINK
  EVENT
  EDUCATIONAL
  POLL
}


# Pagination type for all connections
type PaginationInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  totalCount: Int!
  cursor: String
}

# Paginated community list
type CommunitiesConnection {
  edges: [CommunityEdge!]!
  pageInfo: PaginationInfo!
}

type CommunityEdge {
  node: Community!
  cursor: String!
}

# Paginated member list
type CommunityMembersConnection {
  edges: [CommunityMemberEdge!]!
  pageInfo: PaginationInfo!
}

type CommunityMemberEdge {
  node: CommunityMember!
  cursor: String!
}

# Paginated wall posts list
type CommunityWallConnection {
  edges: [CommunityPostEdge!]!
  pageInfo: PaginationInfo!
}

type CommunityPostEdge {
  node: CommunityPost!
  cursor: String!
}

# Filters for discovering communities
input CommunityFilters {
  interests: [UUID!]
  isPaid: Boolean
  isPrivate: Boolean
  memberCountMin: Int
  memberCountMax: Int
  sortBy: CommunitySortBy
  sortOrder: SortOrder
}

input LocationInput {
  latitude: Float!
  longitude: Float!
}

enum CommunitySortBy {
  CREATED_AT
  MEMBER_COUNT
  ACTIVITY
  RELEVANCE
}

enum SortOrder {
  ASC
  DESC
}

# Input for creating a community
input CreateCommunityInput {
  name: String!
  description: String!
  imageUrl: String   # URL of uploaded image (use uploadFile mutation first)
  coverImageUrl: String # URL of uploaded cover image (use uploadFile mutation first)
  isPrivate: Boolean! = false
  isPaid: Boolean! = false
  price: Float
  currency: Currency = "USD"
  # location: LocationInput!
  interests: [UUID!]!
}

# Input for updating a community
input UpdateCommunityInput {
  name: String
  description: String
  imageUrl: String   # URL of uploaded image (use uploadFile mutation first)
  coverImageUrl: String # URL of uploaded cover image (use uploadFile mutation first)
  isPrivate: Boolean
  isPaid: Boolean
  price: Float
  currency: Currency
  # location: LocationInput
  interests: [UUID!]
}

# Input for creating posts
input CreateCommunityPostInput {
  communityId: UUID!
  type: PostType!
  title: String!
  content: String
  imageUrls: [String]
  videoUrl: String
  linkUrl: String
  isPaid: Boolean! = false
  price: Float
  currency: Currency = "USD"
  tags: [String]
}


# Query operations
type Query {
  discoverCommunities(first: Int = 20, after: String, filters: CommunityFilters): CommunitiesConnection!
  searchCommunities(query: String!, first: Int = 20, after: String, filters: CommunityFilters): CommunitiesConnection!
  myJoinedCommunities(first: Int = 20, after: String, status: MemberRequestStatus): CommunitiesConnection! 
  myOwnedCommunities(first: Int = 20, after: String): CommunitiesConnection!
  community(id: UUID!): Community
  communityMembers(communityId: UUID!, first: Int = 20, after: String, role: MemberRole, status: MemberRequestStatus): CommunityMembersConnection!
  pendingMemberRequests(communityId: UUID!, first: Int = 20, after: String): CommunityMembersConnection!
  recommendedCommunities(first: Int = 10): [Community!]!
}

# Mutation operations
type Mutation {
  createCommunity(input: CreateCommunityInput!): Community!
  updateCommunity(id: UUID!, input: UpdateCommunityInput!): Community!
  deleteCommunity(id: UUID!): GenericResponse!

  joinCommunity(communityId: UUID!): GenericResponse!
  leaveCommunity(communityId: UUID!): GenericResponse!

  approveMemberRequest(communityId: UUID!, userId: UUID!): GenericResponse!
  rejectMemberRequest(communityId: UUID!, userId: UUID!): GenericResponse!

  assignMemberRole(communityId: UUID!, userId: UUID!, role: MemberRole!): GenericResponse!
  removeMemberRole(communityId: UUID!, userId: UUID!): GenericResponse!

  banMember(communityId: UUID!, userId: UUID!, reason: String): GenericResponse!
  unbanMember(communityId: UUID!, userId: UUID!): GenericResponse!
}
